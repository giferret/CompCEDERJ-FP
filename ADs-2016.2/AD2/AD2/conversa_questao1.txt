Nilson, [20.09.16 08:59]
Oi, vamos l√°:

Nilson, [20.09.16 08:59]
Quem t√° a√≠?

Alessandra Barata, [20.09.16 08:59]
Alessandra ... euzinha!

Alessandra Barata, [20.09.16 09:00]
Li a 1 .... procurei algo sobre Lisp e desisti

Alessandra Barata, [20.09.16 09:00]
fui pra 2

Nilson, [20.09.16 09:00]
Lisp √© diferente.

Alessandra Barata, [20.09.16 09:00]
to comecanco ela!

Thiago Borges, [20.09.16 09:00]
[ üòé Sticker ]

Nilson, [20.09.16 09:00]
Mas a id√©ia √© simples.

Nilson, [20.09.16 09:00]
Vou come√ßar:

Alessandra Barata, [20.09.16 09:00]
bora

Nilson, [20.09.16 09:01]
1. Programa√ßao funcional √© baseada em: a) chamadas de fun√ß√µes (obvio). b) Na ausencia de efeitos colaterais da chamada - nem os parametros recebidos e nem variaveis GLOBAIS s√£o mudadas e c) Recurs√£o ao inv√©s de loops.

Nilson, [20.09.16 09:02]
Isso √© claro?

Alessandra Barata, [20.09.16 09:02]
sim

Thiago Borges, [20.09.16 09:02]
Sim

Nilson, [20.09.16 09:02]
O item 2 √© muitoooo importante.

Thiago Borges, [20.09.16 09:02]
querem o exemplo da aula aqui?

Nilson, [20.09.16 09:02]
N√£o, obrigado. Pode pertubar a linha de raciocinio.

Nilson, [20.09.16 09:03]
Isso implica que nenhuma fun√ß√£o pode alterar nada. A √∫nica coisa que uma fun√ß√£o faz √© receber par√¢metros e calcular um  valor de sa√≠da.

Thiago Borges, [20.09.16 09:03]
blz

Alessandra Barata, [20.09.16 09:03]
üëç

Nilson, [20.09.16 09:03]
ok?

Thiago Borges, [20.09.16 09:04]
certo

Nilson, [20.09.16 09:04]
def add(a,b): return a + b                 # em Python

Alessandra Barata, [20.09.16 09:04]
ok

Nilson, [20.09.16 09:04]
Bom, agora vamos as listas....

Nilson, [20.09.16 09:04]
Vou escrever uma funcao que inverte uma lista....

Thiago Borges, [20.09.16 09:05]
def add(a,b):
    return a + b

Thiago Borges, [20.09.16 09:05]
s√≥ pra ficar elegante

Nilson, [20.09.16 09:05]
Ok

Nilson, [20.09.16 09:05]
Melhor....

Nilson, [20.09.16 09:05]
Escrever a fun√ß√£o fatorial em Python no formato que resolve as outras quest√µes.

Nilson, [20.09.16 09:05]
Um momento...

Thiago Borges, [20.09.16 09:06]
usa tr√™s crases pra abrir e tr√™s pra fechar

Thiago Borges, [20.09.16 09:06]
se estiver no pc

Alessandra Barata, [20.09.16 09:06]
n entendi Thiago..

Nilson, [20.09.16 09:06]
Posso prosseguir?

Thiago Borges, [20.09.16 09:06]
pode

Alessandra Barata, [20.09.16 09:06]
sim

Nilson, [20.09.16 09:06]
def fact(n):
    if n == 0: return 1
    return n * fact(n-1)

Nilson, [20.09.16 09:07]
Isso tem de ficar muito claro.

Nilson, [20.09.16 09:07]
O primeiro if faz um teste e RETORNA o resultado

Alessandra Barata, [20.09.16 09:07]
ok... vc so usa o if....e escreve a mesma f√ß

Nilson, [20.09.16 09:07]
Ele √© a base da recurs√£o

Thiago Borges, [20.09.16 09:08]
def fact(n):
    if n == 0: return 1
    return n * fact(n-1)

Nilson, [20.09.16 09:08]
N√£o Thiago

Nilson, [20.09.16 09:08]
Coloque o return na mesma linha

Nilson, [20.09.16 09:08]
Isso √© importante.

Nilson, [20.09.16 09:08]
Esse √© o modo funcional

Nilson, [20.09.16 09:09]
1 comando por linha por que cada linha √© uma "micro-funcao". N√£o existem sequencias de comandos. √â uma forma de pensar. Isso tem de ficar claro.

Alessandra Barata, [20.09.16 09:09]
üëç

Nilson, [20.09.16 09:09]
Ok pra todo mundo?

Alessandra Barata, [20.09.16 09:09]
sim

Thiago Borges, [20.09.16 09:10]
blz

Nilson, [20.09.16 09:10]
Bom, o que foi feito na fun√ß√£o? Voce dividiu o problema em 2, na base do problema e no resto.

Nilson, [20.09.16 09:10]
Vamos calcular o tamanho de uma lista agora:

Nilson, [20.09.16 09:10]
def tamanho(lista):

Nilson, [20.09.16 09:11]
Algu√©m quer tentar?

Thiago Borges, [20.09.16 09:11]
def tamanho(lista):
    return len(lista)

Nilson, [20.09.16 09:12]
Digo, usando recursao e sem as funcoes do Python

Nilson, [20.09.16 09:12]
Vou fazer...

Thiago Borges, [20.09.16 09:12]
calma a√≠

Thiago Borges, [20.09.16 09:13]
s√≥ passando 1 parametro?

Nilson, [20.09.16 09:13]
Sim

Thiago Borges, [20.09.16 09:13]
no caso lista?

Alessandra Barata, [20.09.16 09:13]
perai

Nilson, [20.09.16 09:13]
querem tentar?

Nilson, [20.09.16 09:14]
Tentando ????

Thiago Borges, [20.09.16 09:15]
pensando na verdade

Nilson, [20.09.16 09:15]
A ideia √© sempre a mesma. Procurem a BASE da recurs√£o. Para qual lista voc√™s sabem o tamanho?

Alessandra Barata, [20.09.16 09:15]
tb rs

Alessandra Barata, [20.09.16 09:15]
perai

Nilson, [20.09.16 09:16]
Posso mostrar?

Thiago Borges, [20.09.16 09:16]
Melhor

Alessandra Barata, [20.09.16 09:16]
def tamanho(lista):
      return(lista)

Nilson, [20.09.16 09:16]
def tamanho(lista):
    if lista == []: return 0
    return 1 + tamanho(cdr(lista))

Alessandra Barata, [20.09.16 09:17]
def tamanho(lista):
      if range

Alessandra Barata, [20.09.16 09:17]
tava fazendo assim

Nilson, [20.09.16 09:17]
Tem de pensar de outra forma.

Nilson, [20.09.16 09:17]
A estrat√©gia.... 1) Identificar a base - o ponto de parada da recursao.

Nilson, [20.09.16 09:18]
Ops...

Nilson, [20.09.16 09:18]
Um erro.

Thiago Borges, [20.09.16 09:18]
Tava encucado aqui

Nilson, [20.09.16 09:18]
Consertei

Nilson, [20.09.16 09:18]
A cada novo passo voc√™ CONSOME uma parte da lista e chama a recursao com o que restou.

Thiago Borges, [20.09.16 09:19]
mas o cdr retorna lista[1:len(lista)]

Thiago Borges, [20.09.16 09:19]
pelo menos o que eles ensinaram

Nilson, [20.09.16 09:19]
Sim, mas os arrays comecam em ZERO.

Nilson, [20.09.16 09:19]
Voc√™ pulou o primeiro item.

Nilson, [20.09.16 09:20]
O   CDR retorna a "calda" da lista  (TAIL em ingles).

Nilson, [20.09.16 09:20]
print(cdr([1,2,3])) ===> [2,3]

Thiago Borges, [20.09.16 09:20]
sim

Thiago Borges, [20.09.16 09:20]
ele elimina o primeiro elemento e passa o resto

Nilson, [20.09.16 09:20]
Alessandra, ficou claro?

Alessandra Barata, [20.09.16 09:21]
sim

Nilson, [20.09.16 09:21]
Isso.

Nilson, [20.09.16 09:21]
Esta √© sempre a logica da solu√ß√£o.

Nilson, [20.09.16 09:21]
Tem de ser assim por que as fun√ß√µes:

Nilson, [20.09.16 09:21]
1) N√£o mudam os parametros que recebem

Nilson, [20.09.16 09:21]
2) Calculam novos valores
Nilson, [20.09.16 09:21]
3) Eventualmente usam recursao sobre estes novos valores

Nilson, [20.09.16 09:22]
4) E a recurs√£o termina num ponto onde voc√™ sabe calcular o valor resultante sem d√∫vidas.

Nilson, [20.09.16 09:22]
Isso est√° muito claro? Olhem os dois exemplos que dei.

Nilson, [20.09.16 09:23]
Em ambos voc√™ - 1) testa pelo fim  2) CONSOME uma parte da entrada e passa a parte CONSUMIDA para uma nova recurs√£o.

Nilson, [20.09.16 09:23]
Tem de entender isso!!!

Nilson, [20.09.16 09:23]
Isso est√° claro?

Alessandra Barata, [20.09.16 09:23]
ok

Nilson, [20.09.16 09:23]
Vamos contar quantos 1 aparecem numa lista?

Nilson, [20.09.16 09:24]
def contaUm(lista, contagem):

Nilson, [20.09.16 09:24]
Querem tentar?

Nilson, [20.09.16 09:25]
Eu faria com 2 ifs internos e um return final

Nilson, [20.09.16 09:25]
Qual seria o primeiro if?

Alessandra Barata, [20.09.16 09:25]
if lista ==1?

Nilson, [20.09.16 09:25]
Nao

Alessandra Barata, [20.09.16 09:25]
üòï

Nilson, [20.09.16 09:26]
Acho que sua ideia estava no caminho, mas a implementacao n√£o.

Nilson, [20.09.16 09:26]
Posso falar?

Thiago Borges, [20.09.16 09:26]
calma a√≠

Nilson, [20.09.16 09:27]
Posso? Ainda vao poder tentar nas outras linhas...

Thiago Borges, [20.09.16 09:27]
def conta_um(lista, contagem)
    if lista == []: return 0
    if lista[0] == 1: return conta_um(cdr(lista), contagem + 1)

Nilson, [20.09.16 09:28]
A fun√ß√£o tem um cabe√ßalho direrente.

Nilson, [20.09.16 09:29]
def conta_um(lista, contagem):

Nilson, [20.09.16 09:29]
Quase....

Thiago Borges, [20.09.16 09:29]
eu sei

Thiago Borges, [20.09.16 09:30]
da uma forcinha a√≠ alessandra

Nilson, [20.09.16 09:31]
Tem um defeito no primeiro if. √â facil identificar.

Alessandra Barata, [20.09.16 09:31]
def conta_um(lista, contagem)
      if lista == []: return 0
      if lista[0] == 1: return conta_um(cdr(lista), contagem + 1)

Nilson, [20.09.16 09:32]
O segundo if deveria usar CAR

Nilson, [20.09.16 09:32]
E tem de ter o return final

Nilson, [20.09.16 09:32]
Vamos resolver o problema do primeiro if?

Thiago Borges, [20.09.16 09:33]
def conta_um(lista, contagem)
    if lista == []: return 0
    if car(lista) == 1: return conta_um(cdr(lista), contagem + 1)

Alessandra Barata, [20.09.16 09:33]
def conta_um(lista, contagem)
      if lista == []: return 0
      if lista[0] == 1: return conta_um(car(lista), contagem + 1)

Nilson, [20.09.16 09:33]
Thiago, o segundo if t√° ok

Nilson, [20.09.16 09:33]
Falta resolver o primeiro if e o return do final

Thiago Borges, [20.09.16 09:34]
o primeiro eu t pensando

Nilson, [20.09.16 09:34]
Ok

Alessandra Barata, [20.09.16 09:34]
tem que por car no 1 if tb?

Thiago Borges, [20.09.16 09:34]
return contagem

Thiago Borges, [20.09.16 09:34]
?

Nilson, [20.09.16 09:34]
ISSO

Alessandra Barata, [20.09.16 09:35]
ISSO pra nos 2? rrs

Nilson, [20.09.16 09:35]
Infelizmente para o return contagem

Alessandra Barata, [20.09.16 09:35]
üòï

Nilson, [20.09.16 09:35]
Republica ai Thiago...

Thiago Borges, [20.09.16 09:36]
def conta_um(lista, contagem)
    if lista == []: return contagem
    if car(lista) == 1: return conta_um(cdr(lista), contagem + 1)

Alessandra Barata, [20.09.16 09:36]
ahhh ta!

Nilson, [20.09.16 09:36]
Falta s√≥ o return

Thiago Borges, [20.09.16 09:36]
√≥bvio

Alessandra Barata, [20.09.16 09:36]
return conta_um

Thiago Borges, [20.09.16 09:36]
se n√£o for igual a um n√£o vai retornar nada

Nilson, [20.09.16 09:37]
Nao nao nao

Nilson, [20.09.16 09:37]
Sempre tem de retornar algo.

Alessandra Barata, [20.09.16 09:37]
retorna lista vazia?

Nilson, [20.09.16 09:37]
N√£o.

Nilson, [20.09.16 09:37]
Pensem em como isso funciona.

Nilson, [20.09.16 09:38]
print( conta_um( [2,1],0 ))

Thiago Borges, [20.09.16 09:38]
def conta_um(lista, contagem):
    if lista == []: return contagem
    if car(lista) == 1: return conta_um(cdr(lista), contagem + 1)
    return conta_um(cdr(lista), contagem)

Nilson, [20.09.16 09:38]
Quaseeee Thiago. N√£o est√° errado, mas lembra que eu disse que eram 2 ifs e 1 return?

Nilson, [20.09.16 09:39]
Isso

Nilson, [20.09.16 09:39]
E tem de chamar com conta_um(lista, 0)

Thiago Borges, [20.09.16 09:39]
justamente, passando os ifs anteriores n√£o precisa de mais um

Nilson, [20.09.16 09:40]
Este padr√£o de montar as fun√ß√µes √© o padr√£o de linguagems como Haskell, ML e F#

Nilson, [20.09.16 09:40]
Bom, agora vamos fazer a mesma coisa sem o parametro contagem.

Nilson, [20.09.16 09:40]
def conta_1(lista):

Nilson, [20.09.16 09:41]
Alessandra, tem alguma d√∫vida?

Alessandra Barata, [20.09.16 09:42]
to com problema em escreverr isso... to entendendo , mas na hora de escrever .... mas vms la!

Thiago Borges, [20.09.16 09:42]
def conta_1(lista):
    if lista == []: return 0
    if car(lista) == 1: return conta_1(cdr(lista)) + 1
    return conta_1(cdr(lista))

Nilson, [20.09.16 09:42]
Quase thiago

Alessandra Barata, [20.09.16 09:43]
acho que o ultimo return mudaria ne?

Nilson, [20.09.16 09:43]
ISSSOOOO

Nilson, [20.09.16 09:43]
Ops.

Nilson, [20.09.16 09:43]
Thiago, tem um erro na linha 2 Thiago.

Nilson, [20.09.16 09:43]
Voc√™ n√£o CONSUMIU.

Nilson, [20.09.16 09:44]
sso

Nilson, [20.09.16 09:44]
Agora t√° certo.

Thiago Borges, [20.09.16 09:44]
def conta_1(lista):
    if lista == []: return 0
    if car(lista) == 1: return conta_1(cdr(lista)) + 1
    return conta_1(cdr(lista))

Nilson, [20.09.16 09:44]
Na linha 2 eu colocaria o 1 na frente. √â sempre bom deixar a recurs√£o para o final

Nilson, [20.09.16 09:45]
Isso evidencia o que voc√™ est√° alterando antes da recurs√£o

Nilson, [20.09.16 09:45]
1 + recursao

Thiago Borges, [20.09.16 09:45]
√© que eu j√° tinha come√ßado a escrever e fiquei com pregui√ßa de apagar

Thiago Borges, [20.09.16 09:45]
def conta_1(lista):
    if lista == []: return 0
    if car(lista) == 1: return 1 + conta_1(cdr(lista))
    return conta_1(cdr(lista))

Nilson, [20.09.16 09:45]
Thiago, est√° claro?

Thiago Borges, [20.09.16 09:46]
sim

Nilson, [20.09.16 09:46]
Nosso papo esclareceu um pouco as coisas?

Thiago Borges, [20.09.16 09:46]
√© essa baga√ßa a√≠ que a gente vai ter que se virar pra fazer

Thiago Borges, [20.09.16 09:46]
ajudou bastante

Nilson, [20.09.16 09:46]
Este √© o modelo. Todas as fun√ß√µes da quest√£o 1 seguem estes modelos...

Thiago Borges, [20.09.16 09:47]
entendi

Nilson, [20.09.16 09:47]
Vamos falar da ESTRATEGIA para resolver o primeiro problema da quest√£o 1, ok?

Nilson, [20.09.16 09:47]
Depois voc√™s escrevem por conta propria.

Thiago Borges, [20.09.16 09:47]
n√£o vai ser f√°cil, vou ter que queimar a mufa

Thiago Borges, [20.09.16 09:47]
mas vai sair

Nilson, [20.09.16 09:47]
def obterSetor(lista, inicio, fim):
    # fun√ß√£o que recebe como par√¢metros uma lista elementos e
    # um par de valores inteiros, chamados de inicio e de fim,
    #   que definem o intervalo de e elementos da lista que devem
    # compor o retorno da fun√ß√£o

Alessandra Barata, [20.09.16 09:47]
ok

Nilson, [20.09.16 09:48]
Qual seria a estrat√©gia para resolver?

Thiago Borges, [20.09.16 09:48]
tem que rodar cdr at√© a primeira entrada zerar

Nilson, [20.09.16 09:49]
Zerar?

Thiago Borges, [20.09.16 09:49]
2 -1

Thiago Borges, [20.09.16 09:49]
inicio -1

Nilson, [20.09.16 09:49]
Isso
Nilson, [20.09.16 09:49]
E depois?

Nilson, [20.09.16 09:49]
Olha....

Alessandra Barata, [20.09.16 09:50]
inicio -2 n√£o e nao?

Nilson, [20.09.16 09:50]
Um programa funcional, n√£o tem sequencias de instrucoes.

Nilson, [20.09.16 09:50]
Tem chamadas de funcoes aninhadas.

Nilson, [20.09.16 09:50]
Ent√£o cada PARTE deve ser uma outra funcao.

Nilson, [20.09.16 09:50]
O que o Thiago falou: rodar crd at√© zerar tem de se colocado em OUTRA funcao.

Thiago Borges, [20.09.16 09:51]
entendi

Nilson, [20.09.16 09:51]
Cujo resultado e ENtrada de outra funcao, entende?

Nilson, [20.09.16 09:51]
obter(lista,i,f)

Thiago Borges, [20.09.16 09:51]
uma fun√ß√£o que vai retornar a posi√ß√£o iinicial

Nilson, [20.09.16 09:51]
[Em resposta a Thiago Borges]
N√£o √© bem isso

Nilson, [20.09.16 09:52]
def obter(lista,i,f):
    return    funcao2 ( funcao1 ( parametros), parametros)

Nilson, [20.09.16 09:52]
A funcao 1 retorna uma LISTA sem os primeiros elementos

Nilson, [20.09.16 09:52]
A funcao2 retorna apenas os elementos desejados da lista que recebeu da funcao1

Nilson, [20.09.16 09:53]
Deu para entender?

Nilson, [20.09.16 09:53]
Por exemplo, se voce SEMPRE fosse atuar a partir do segundo elemento, a funcao1 seria apenas o CDR

Nilson, [20.09.16 09:54]
Em programacao funcional, voce troca as sequencias de comandos, por aninhamentos de funcoes.

Nilson, [20.09.16 09:54]
Uma funcao3 chama funcao2 que chama funcao1  =>  funcao3(funcao2(funcao1()))

Nilson, [20.09.16 09:54]
e equivalente a:
  funcao1
  funcao2
  funcao3

Alessandra Barata, [20.09.16 09:55]
NIlson.... no caso desta questao terei 3 funcoes certo?

Thiago Borges, [20.09.16 09:55]
def obterSetor(lista, inicio, fim):
    return setor(posicao(lista, incio), posicao(lista, final))

Alessandra Barata, [20.09.16 09:56]
terei que rfzer a f√ß 1 ... a 2... e a 3

Alessandra Barata, [20.09.16 09:56]
e uma chamdn o outra ok?

Thiago Borges, [20.09.16 09:57]
N√£o √© bem isso

Nilson, [20.09.16 09:57]
[Em resposta a Alessandra Barata]
Voc√™ tera NO MINIMO 3 funcoes, uma para cada item da quest√£o 1. Mas cada uma destas pode precisar de mais funcoes auxiliares.

Alessandra Barata, [20.09.16 09:57]
ok

Thiago Borges, [20.09.16 09:57]
ela est√° falando da obterSetor

Nilson, [20.09.16 09:58]
Eu usei 2 auxiliares para o "obter", Nenhuma para o "rodar" e 1 para o "ordenar".

Nilson, [20.09.16 09:59]
Bom, 1 horinha de papo.

Nilson, [20.09.16 09:59]
Espero que tenha dado uma luz.

Thiago Borges, [20.09.16 09:59]
Deu sim, Nilson

Thiago Borges, [20.09.16 09:59]
Ajudou bastante

Alessandra Barata, [20.09.16 09:59]
üëç vlw Nilson

Alessandra Barata, [20.09.16 10:00]
vou "quebrar" a cabe√ßa aki..... e qq coisa grito vcs ... ta Thiago?rs

Thiago Borges, [20.09.16 10:00]
eu vou qubrar a cabe√ßa aqui tamb√©m

Nilson, [20.09.16 10:00]
Alessandra, se tiver d√∫vidas tenta o Thiago por que ele √© show. E se ainda tiverem d√∫vidas falem comigo. S√≥ n√£o posso fazer, mas posso indicar. Revejam TUDO o que eu escrevi por que define a ESTRUTURA da solu√ß√£o de todos os problemas.

Alessandra Barata, [20.09.16 10:01]
blz

Alessandra Barata, [20.09.16 10:01]
obrigada Nilson!!!

Nilson, [20.09.16 10:01]
S√≥ mais um problema para voc√™s....

Nilson, [20.09.16 10:01]
Hummm

Thiago Borges, [20.09.16 10:01]
[Em resposta a Nilson]
Eu sou show quando eu sei!!!

Alessandra Barata, [20.09.16 10:01]
kkkkk

Thiago Borges, [20.09.16 10:01]
Quando eu to na d√∫vida a√≠ eu recorro ao Nilson

Alessandra Barata, [20.09.16 10:01]
modesto !

Nilson, [20.09.16 10:01]
Mas agora voc√™ sabe. E as d√∫vidas dos outros v√£o te estimular.

Thiago Borges, [20.09.16 10:02]
As d√∫vidas dos colegas me ajudam muito

Thiago Borges, [20.09.16 10:02]
Aprendo mais com eles do que com os professores das video aulas

Nilson, [20.09.16 10:02]
N√£o √© mesmo? Eu adoro explicar por que deixa as coisas mais claras para mim.

Nilson, [20.09.16 10:02]
Explicar te coloca a prova.

Thiago Borges, [20.09.16 10:02]
Com certeza

Thiago Borges, [20.09.16 10:03]
Voc√™ s√≥ consegue explicar se aprendeu

Nilson, [20.09.16 10:03]
Bom, posso passar um exerc√≠cio?

Nilson, [20.09.16 10:03]
inverter uma lista

Thiago Borges, [20.09.16 10:04]
uma dica: usar o cons

Nilson, [20.09.16 10:04]
N√£o... Melhor n√£o.

Nilson, [20.09.16 10:04]
Sugiro que se concentrem no que eu escrevi, revejam este papo e tentem os exercicios da lista.

Alessandra Barata, [20.09.16 10:04]
Vdd Thiago!

Nilson, [20.09.16 10:05]
Dica: no "rodar", rodar para um lado √© facil, para o outro n√£o √©. Eu usei um truque de rodar mais do que o pedido para ter o mesmo efeito.

Nilson, [20.09.16 10:06]
Bom, vou sair. T+

Thiago Borges, [20.09.16 10:06]
Valeu!!